-> create a default class for REST Calls (see spawn/composer_repository/src/Services/GithubWebhookInterpreter.php::doRestCall())

-> spawn\composer_repository\src\Controllers\ComposerController.php:32
-> try creating a valid composer package from the loaded data
-> only load and update this data when the webhook is activated! Store the github response in the repository data and the generated packages.json in the project data field
-> then output the project data as the packages.json answer instead

-> find the correct repository to update by the repository name

-> (optional) create a fitting backend display for the packages data

-> try reading the composer.json in the referenced repository and get data like description, etc.

-> create a TODO list for the website for better listing

-> create a user login module for the frontend

-> create a way to submit a form from any other (button) element

-> create a method of linking the accordion trigger with the body without needing them to be in the same parent

-> create a password reset function

-> create a command to activate/disable modules

-> generalize repositories to something like "product.repository" as preparation for an automatic API

-> create a unified API for all repositories

-> [BUG] CRSF Token invalidates after inserting wrong data in the backend login

-> Allow customSelect and entitySelect to select multiple entries

-> automatically detect another language from the first url parameter. Alternatively create a url config, that lists all possible urls and their corresponding language

-> SEO Analizer: save every page load in two tables: today and total. Count and save the today entries every night and save it
   for this day in total

-> Find a better way to get the current http_host than by calling $_SERVER['http_host'] (not trust worthy)
   D:\docker_projects\spawn\www\src\spawn\system\Core\Helper\CookieHelper.php